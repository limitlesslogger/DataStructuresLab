void insertPosition()
{
    int pos=0,cnt=0;
    int flag=0;
    nd* prev;
    printf("Enter the position at which to insert\n");
    scanf("%d",&pos);
    nd* new_node=(nd*)malloc(sizeof(nd));
    printf("Enter new node data\n");
    scanf("%d",&new_node->data);
    nd* temp=head;
    if(head==NULL||pos==1)
    {
        new_node->next=head;
        head=new_node;
        flag=1;
        // return;
    }
    else 
    {
        while(temp!=NULL)
        {
            cnt++;
            if(pos!=cnt)
            {
                prev=temp;
                temp=temp->next;
            }
            else if(pos==cnt)
            {
                new_node->next=temp;
                prev->next=new_node;
                flag=1;
            }
        }
        if(flag!=1&&prev!=NULL&&temp==NULL)
        {
            new_node->next=NULL;
            prev->next=new_node;
            flag=1;
        }
    }
    if(flag==0)
    {
        printf("Position invalid\n");
    }
}

void insertPosition() 
{
    int pos = 0, cnt = 0;
    int flag = 0;
    nd* prev = NULL; // Initialize prev to NULL
    printf("Enter the position at which to insert\n");
    scanf("%d", &pos);

    // Allocate memory for the new node
    nd* new_node = (nd*)malloc(sizeof(nd));
    if (new_node == NULL) 
    {
        printf("Memory allocation failed\n");
        return;
    }

    printf("Enter new node data\n");
    scanf("%d", &new_node->data);
    new_node->next = NULL; // Initialize the next pointer to NULL

    nd* temp = head;

    if (head == NULL || pos == 1) {
        // Insert at the beginning of the list
        new_node->next = head;
        head = new_node;
        flag = 1;
    } 
    else 
    {
        // Traverse the list to find the position to insert
        while (temp != NULL) {
            cnt++;
            if (pos != cnt) {
                prev = temp;
                temp = temp->next;
            } 
            else if (pos == cnt) {
                // Insert at the specified position
                new_node->next = temp;
                prev->next = new_node;
                flag = 1;
                break; // Break out of the loop once inserted
            }
        }

        // If position is at the end of the list
        if (flag != 1 && prev != NULL && temp == NULL) {
            new_node->next = NULL;
            prev->next = new_node;
            flag = 1;
        }
    }

    if (flag == 0) {
        printf("Position invalid\n");
    }
}
void insertPosition() {
    int pos = 0, cnt = 0;
    int flag = 0;
    nd* prev = NULL;
    printf("Enter the position at which to insert\n");
    scanf("%d", &pos);

    if (pos < 1) {
        printf("Invalid position. Position must be 1 or greater.\n");
        return;
    }

    nd* new_node = (nd*)malloc(sizeof(nd));
    if (new_node == NULL) {
        printf("Memory allocation failed\n");
        return;
    }

    printf("Enter new node data\n");
    scanf("%d", &new_node->data);
    new_node->next = NULL;

    nd* temp = head;

    if (head == NULL || pos == 1) {
        new_node->next = head;
        head = new_node;
        flag=1;
        return;
    } 
    else 
    {
        while (temp != NULL) 
        {
            cnt++;
            if (pos != cnt) 
            {
                prev = temp;
                temp = temp->next;
            } 
            else if (pos == cnt) 
            {
                new_node->next = temp;
                prev->next = new_node;
                flag = 1;
                // prev = temp;
                // temp = temp->next;
                // break;
                return;
            }
        }

        if (flag != 1 && prev->next==NULL&&prev!=NULL) {
            new_node->next = NULL;
            prev->next = new_node;
            flag = 1;
            prev = temp;
            temp = temp->next;
            return;
        }
}
    if (flag == 0) 
    {
        printf("Invalid position. Position exceeds the size of the list.\n");
    }
}



// #include <stdio.h>
// #include <stdlib.h>
// typedef struct node
// {
//     int data;
//     struct node* next;
//     struct node* prev;
// }nd;
// nd* head;
// //new inserted elements next points to head
// void insert_cll()
// {
//     nd* new_node=(nd*)malloc(sizeof(nd));
//     printf("Enter node data\n");
//     scanf("%d",&new_node->data);
//     if(head==NULL)
//     {
//         head=new_node;
//         new_node->prev=NULL;
//         new_node->next=head;
//     }
//     else
//     {
//         nd* temp=head;
//         while(temp->next!=head)
//         {
//             temp=temp->next;
//         }
//         if(temp->next==head)
//         {
//             temp->next=new_node;
//             new_node->next=head;
//             head->prev=new_node;
//             new_node->prev=temp;
//         }
//     }
// }
// void delete_front()
// {
//     if(head==NULL)
//     {
//         printf("No element\n");
//     }
//     else if(head->next!=NULL)
//     {
//         nd* ptr=head;
//         head=ptr->next;
//         ptr->next->prev=NULL;
//         ptr->next=NULL;
//         free(ptr);
//     }
//     else
//     {
//         nd* ptr=head;
//         head=NULL;
//         free(ptr);
//     }
// }
// void display_cll()
// {
//     if(head==NULL)
//     {
//         printf("Empty\n");
//     }
//     else
//     {
//         nd* temp=head->next;
//         printf("%d ",head->data);
//         while(temp!=head)
//         {
//             printf("%d ",temp->data);
//             temp=temp->next;
//         }
//         printf("\n");
//     }
// }
// void main()
// {
//     char ch;
//     printf("Do you wish to insert elements into list\n");
//     scanf("%c",&ch);
//     while(ch=='y')
//     {
//         insert_cll();//insertion at end
//         printf("Do you wish to insert elements into list\n");
//         scanf(" %c",&ch);
//     }
//     display_cll();
//     ch='n';
//     printf("Do you wish to perform deletion\n");
//     scanf(" %c",&ch);
//     while(ch=='y')
//     {
//         delete_front();
//         display_cll();
//         printf("Do you wish to perform deletion\n");
//         scanf(" %c",&ch);
//     }
//     // display_cll();
// }



// #include <stdio.h>
// #include <stdlib.h>
// #include <math.h>
// typedef struct node
// {
//     int coeff;
//     struct node* next;
//     int exp;
// }nd;
// nd *head_A,*head_B;
// nd* input(nd* new_node,nd* head)
// {
//     char ch='y';
//     printf("Insert terms y or n\n");
//     scanf(" %c",&ch);
//     while(ch=='y')
//     {
//         printf("Enter coefficient\n");
//         scanf("%d",&new_node->coeff);
//         printf("Enter exponent\n");
//         scanf("%d",&new_node->exp);
//         if(head==NULL)
//         {
//             new_node->next=NULL;
//             head=new_node;
//         }
//         else
//         {
//             nd* temp=head;
//             while(temp->next!=NULL)
//             {
//                 temp=temp->next;
//             }
//             temp->next=new_node;
//             new_node->next=NULL;
//         }
//         printf("Insert terms y or n\n");
//         scanf(" %c",&ch);
//     }
//     return head;
// }
// void display(nd* head)
// {
//     if(head==NULL)
//     {
//         printf("No terms\n");
//     }
//     else
//     {
//         nd* temp=head;
//         printf("%dx^%d ",head->coeff,head->exp);
//         temp=temp->next;
//         while(temp!=NULL)
//         {
//             printf("+ %dx^%d ",temp->coeff,temp->exp);
//             temp=temp->next;
//         }
//     }
// }
// void main()
// {
//     nd* poly_A=(nd*)malloc(sizeof(nd));
//     nd* poly_B=(nd*)malloc(sizeof(nd));
//     head_A=input(poly_A,head_A);
//     display(head_A);
//     head_B=input(poly_B,head_B);
//     display(head_B);
// }



#include <stdio.h>
#include <stdlib.h>
#include <math.h>
typedef struct node
{
    int coeff;
    struct node* next;
    int exp;
}nd;
nd *head1,*head2,*head3;
nd *ptr1,*ptr2,*ptr3;
nd* input(nd* head)
{
    char ch;
    printf("Do you wish to add terms y or n\n");
    scanf(" %c",&ch);
    while(ch=='y')
    {
        nd* new_node=(nd*)malloc(sizeof(nd));//new node to keep the term
        printf("Enter coefficient\n");
        scanf("%d",&new_node->coeff);
        printf("Enter exponent\n");
        scanf("%d",&new_node->exp);
        new_node->next=NULL;
        if(head==NULL)
        {
            head=new_node;
        }
        else
        {
            nd* temp=head;
            while(temp->next!=NULL)
            {
                temp=temp->next;
            }
            if(temp->next==NULL)
            {
                temp->next=new_node;
            }
        }
        printf("Do you wish to add terms y or n\n");
        scanf(" %c",&ch);
    }
    return head;
}
void display(nd* head)
{
    if(head==NULL)
    {
        printf("No terms\n");
    }
    else
    {
        nd* temp=head;
        printf("%dx^%d ",head->coeff,head->exp);
        temp=temp->next;
        while(temp!=NULL)
        {
            printf("+ %dx^%d ",temp->coeff,temp->exp);
            temp=temp->next;
        }
        printf("\n");
    }
}
nd* add_poly(nd* head1,nd* head2)
{
    ptr1=head1;
    ptr2=head2;
    ptr3=head3;
    if(head1==NULL&&head2==NULL)
    {
        printf("both polynomials have no terms\n");
    }
    else
    {
        nd* new_node=(nd*)malloc(sizeof(nd));
        new_node->next=NULL;
        if(head3==NULL)
            {
                head3=new_node;
                ptr3=head3;
            }
            else
            {
                ptr3->next=new_node;
                ptr3=ptr3->next;
            }
        while(ptr1!=NULL&&ptr2!=NULL)//Both have terms to compare
        {
            if(ptr1->exp==ptr2->exp)
            {
                new_node->exp=ptr1->exp;
                new_node->coeff=ptr1->coeff+ptr2->coeff;
                ptr1=ptr1->next;
                ptr2=ptr2->next;
            }
            else if(ptr1->exp>ptr2->exp)
            {
                new_node->exp=ptr1->exp;
                new_node->coeff=ptr1->coeff;
                ptr1=ptr1->next;
            }
            else if(ptr1->exp<ptr2->exp)
            {
                new_node->exp=ptr2->exp;
                new_node->coeff=ptr2->coeff;
                ptr2=ptr2->next;
            }
        }
        while(ptr1!=NULL)
        {
                new_node->exp=ptr1->exp;
                new_node->coeff=ptr1->coeff;
                ptr1=ptr1->next;
        }
        while(ptr2!=NULL)
        {
                new_node->exp=ptr2->exp;
                new_node->coeff=ptr2->coeff;
                ptr2=ptr2->next;
        }
    }
    ptr3->next = NULL;
    return head3;
}
void main()
{
    printf("Polynomial 1\n");
    head1=input(head1);
    display(head1);
    printf("Polynomial 2\n");
    head2=input(head2);
    display(head2);
    int n;
    scanf("%d",&n);
    head3=add_poly(head1,head2);
    printf("Result is \n");
    display(head3);
}